#!/usr/bin/env python3
"""
Configura√ß√£o otimizada para execu√ß√£o em 11 horas - TODAS AS 37 INST√ÇNCIAS.

Esta configura√ß√£o garante:
1. Execu√ß√£o de TODAS as 37 inst√¢ncias (CliSAT + GRASP)
2. Timeouts realistas para completar em 11h
3. Resultados comparativos completos para a disserta√ß√£o
"""

# CONFIGURA√á√ÉO OTIMIZADA PARA 11 HORAS - TODAS AS INST√ÇNCIAS
CONFIG_11H = {
    # CliSAT - Timeout otimizado para todas as inst√¢ncias
    'clisat_timeout': 600,  # 10 minutos por inst√¢ncia (realista)
    
    # GRASP - Eficiente, pode usar timeout maior se necess√°rio
    'grasp_timeout': 180,   # 3 minutos por inst√¢ncia (buffer extra)
    
    # Execu√ß√£o completa
    'total_instances': 37,  # TODAS as inst√¢ncias DIMACS
    
    # Estimativa de tempo para TODAS as 37 inst√¢ncias:
    # - CliSAT: 37 √ó 10min = 370min (6.17h)
    # - GRASP: 37 √ó 3min = 111min (1.85h)  
    # - TOTAL: 481min (8.02h)
    # - BUFFER: 2.98h para imprevistos e inst√¢ncias dif√≠ceis
    # - MARGEM: Dentro das 11h dispon√≠veis com boa folga!
}

# COMANDOS PARA APLICAR A NOVA CONFIGURA√á√ÉO

def apply_optimized_config():
    """Comandos para aplicar a configura√ß√£o otimizada."""
    print("\n" + "="*60)
    print("üîß COMANDOS PARA APLICAR A CONFIGURA√á√ÉO OTIMIZADA")
    print("="*60)
    
    print("\n1Ô∏è‚É£ PARAR EXECU√á√ÉO ATUAL DO CLISAT:")
    print("   # Encontrar e matar o processo que est√° h√° 4h+ rodando")
    print("   pkill -f 'execute_clisat_strategy.py'")
    print("   # Ou usar Ctrl+C no terminal onde est√° rodando")
    
    print("\n2Ô∏è‚É£ ATUALIZAR TIMEOUTS NO ALGORITMO:")
    print("   # Editar config/algorithm_params.py:")
    print("   CLISAT_TIME_LIMIT = 600      # 10 minutos")
    print("   GRASP_TIME_LIMIT = 180       # 3 minutos")
    
    print("\n3Ô∏è‚É£ EXECUTAR CLISAT COM NOVOS TIMEOUTS:")
    print("   ./venv-clique/bin/python scripts/execute_clisat_strategy.py \\")
    print("     --groups small_fast,medium,large \\")
    print("     --time-limit 600 \\")
    print("     --resume")
    
    print("\n4Ô∏è‚É£ EXECUTAR GRASP EM PARALELO:")
    print("   ./venv-clique/bin/python scripts/batch_execution.py \\")
    print("     --time-limit-exact 600 \\")
    print("     --time-limit-heuristic 180 \\")
    print("     --output resultados_finais_11h")
    
    print("\n5Ô∏è‚É£ OU APENAS GRASP (SE CLISAT AINDA ESTIVER RODANDO):")
    print("   ./venv-clique/bin/python scripts/grasp_only_execution.py \\")
    print("     --time-limit 180 \\")
    print("     --output grasp_11h_todas_instancias")
    
    print("\nüìä MONITORAMENTO:")
    print("   # Ver progresso CliSAT:")
    print("   tail -f data_files/logs/clisat_execution.log")
    print("   # Ver processos rodando:")
    print("   ps aux | grep python | grep -E '(clisat|grasp|batch)'")
    
    print("\n‚è∞ CRONOGRAMA SUGERIDO:")
    print("   Agora: Parar CliSAT atual e iniciar com novo timeout")
    print("   +6h: CliSAT terminar√° a maioria das inst√¢ncias")
    print("   +2h: GRASP processar√° todas as 37 inst√¢ncias")
    print("   +3h: Buffer para inst√¢ncias dif√≠ceis e an√°lise")
    print("   = 11h TOTAL")

# COMANDOS DE MONITORAMENTO PARA O TERMINAL
def print_monitoring_commands():
    """Comandos pr√°ticos para monitorar execu√ß√µes no terminal."""
    print("\n" + "="*60)
    print("üìä COMANDOS DE MONITORAMENTO (USE NO SEU TERMINAL)")
    print("="*60)
    
    print("\nüîç VER PROCESSOS RODANDO:")
    print("ps aux | grep python | grep -E '(grasp|clisat)' | grep -v grep")
    
    print("\nüìà MONITORAR GRASP EM TEMPO REAL:")
    print("tail -f data_files/thesis_results/grasp_11h_todas_instancias_*.log")
    
    print("\nüìà MONITORAR CLISAT EM TEMPO REAL:")
    print("tail -f clisat_execution.log")
    
    print("\nüìä VER √öLTIMOS RESULTADOS GRASP:")
    print("ls -la data_files/thesis_results/*grasp*11h* | tail -5")
    
    print("\n‚è±Ô∏è TEMPO DE EXECU√á√ÉO DOS PROCESSOS:")
    print("ps -eo pid,etime,cmd | grep python | grep -E '(grasp|clisat)'")
    
    print("\nüîÑ VERIFICAR PROGRESSO APROXIMADO:")
    print("# GRASP - contar inst√¢ncias processadas:")
    print("grep -c 'Processando' data_files/thesis_results/grasp_11h_todas_instancias_*.log | tail -1")
    print("# CliSAT - ver √∫ltimo checkpoint:")
    print("grep 'inst√¢ncias conclu√≠das' clisat_execution.log | tail -1")
    
    print("\nüíæ USO DE MEM√ìRIA:")
    print("ps aux | grep python | grep -E '(grasp|clisat)' | awk '{print $2, $4\"%\", $11}' | head -10")
    
    print("\nüéØ ESTIMATIVA DE CONCLUS√ÉO:")
    print("# Se GRASP est√° na inst√¢ncia X de 37:")
    print("# Tempo restante ‚âà (37-X) √ó 3min")
    print("# Se CliSAT est√° na inst√¢ncia Y de 31:")
    print("# Tempo restante ‚âà (31-Y) √ó 10min")

# PAR√ÇMETROS PARA SCRIPTS
SCRIPT_PARAMS = {
    'clisat_command': [
        './venv-clique/bin/python', 'scripts/execute_clisat_strategy.py',
        '--groups', 'small_fast,medium,large',
        '--time-limit', '600',
        '--resume'
    ],
    'batch_command': [
        './venv-clique/bin/python', 'scripts/batch_execution.py',
        '--time-limit-exact', '600',
        '--time-limit-heuristic', '180',
        '--output', 'resultados_finais_11h'
    ],
    'grasp_only_command': [
        './venv-clique/bin/python', 'scripts/grasp_only_execution.py',
        '--time-limit', '180',
        '--output', 'grasp_11h_todas_instancias'
    ]
}

def print_strategy():
    """Imprimir estrat√©gia detalhada."""
    print("üéØ ESTRAT√âGIA OTIMIZADA PARA 11 HORAS - TODAS AS INST√ÇNCIAS")
    print("=" * 60)
    print(f"‚è±Ô∏è  CliSAT timeout: {CONFIG_11H['clisat_timeout']}s (10min)")
    print(f"‚è±Ô∏è  GRASP timeout: {CONFIG_11H['grasp_timeout']}s (3min)")
    print(f"üìä Total de inst√¢ncias: {CONFIG_11H['total_instances']} (TODAS)")
    print()
    print("üìà ESTIMATIVA DE TEMPO PARA TODAS AS 37 INST√ÇNCIAS:")
    
    clisat_time = CONFIG_11H['total_instances'] * CONFIG_11H['clisat_timeout'] / 60
    grasp_time = CONFIG_11H['total_instances'] * CONFIG_11H['grasp_timeout'] / 60
    total_time = clisat_time + grasp_time
    
    print(f"   CliSAT: {clisat_time:.1f} min ({clisat_time/60:.1f}h)")
    print(f"   GRASP:  {grasp_time:.1f} min ({grasp_time/60:.1f}h)")
    print(f"   TOTAL:  {total_time:.1f} min ({total_time/60:.1f}h)")
    print(f"   BUFFER: {11 - total_time/60:.1f}h para imprevistos")
    print()
    if total_time/60 <= 11:
        print("‚úÖ VI√ÅVEL para execu√ß√£o em 11 horas!")
        print("üéØ Vai processar TODAS as 37 inst√¢ncias com boa margem de seguran√ßa!")
    else:
        print("‚ö†Ô∏è Pode exceder 11 horas - considere reduzir timeouts")
    
    print()
    print("üìã PR√ìXIMOS PASSOS:")
    print("1. üõë Parar execu√ß√£o CliSAT atual (est√° h√° 4h+ em uma inst√¢ncia)")
    print("2. ‚öôÔ∏è  Aplicar novos timeouts (10min CliSAT, 3min GRASP)")
    print("3. üöÄ Reiniciar com configura√ß√£o otimizada")
    print("4. üìä Obter resultados de TODAS as 37 as inst√¢ncias em ~8h")

if __name__ == "__main__":
    print_strategy()
    apply_optimized_config()
    print_monitoring_commands()
