"""
Estimador de Tempo para Casos de Timeout

Este m√≥dulo fornece m√©todos simples para estimar o tempo necess√°rio
quando os algoritmos excedem o tempo limite, baseado nos dados
j√° coletados durante a execu√ß√£o.

Autor: Walber
Data: Julho 2025
"""

import time
import math
from typing import Dict, Any, Optional, Tuple


class TimeoutEstimator:
    """
    Estimador de tempo baseado em dados de execu√ß√£o parcial.
    
    Este estimador usa informa√ß√µes que j√° s√£o coletadas pelos algoritmos
    existentes para calcular estimativas de tempo necess√°rio em casos de timeout.
    """
    
    @staticmethod
    def estimate_clisat_time(stats: Dict[str, Any], 
                           current_time: float, 
                           graph_size: int,
                           current_bound: int) -> Dict[str, Any]:
        """
        Estimar tempo necess√°rio para CliSAT baseado no progresso atual.
        
        DADOS NECESS√ÅRIOS (j√° coletados pelo CliSAT):
        - stats['nodes_explored']: n√∫mero de n√≥s explorados na √°rvore de busca
        - current_time: tempo j√° decorrido
        - graph_size: n√∫mero de v√©rtices do grafo
        - current_bound: melhor clique encontrado at√© agora
        
        COMO PEGAR OS DADOS:
        1. stats['nodes_explored'] - j√° existe no algoritmo
        2. current_time - calculado como: time.time() - start_time
        3. graph_size - self.n (n√∫mero de v√©rtices)
        4. current_bound - self.lb (tamanho do melhor clique)
        
        C√ÅLCULO DA ESTIMATIVA:
        - Espa√ßo de busca restante ‚âà 2^(graph_size - current_bound)
        - Taxa de explora√ß√£o = nodes_explored / current_time
        - Estimativa = espa√ßo_restante / taxa_explora√ß√£o
        
        Returns:
            Dict com estimativa e dados do c√°lculo
        """
        nodes_explored = stats.get('nodes_explored', 0)
        
        if nodes_explored == 0 or current_time == 0:
            return {
                'estimated_total_time': float('inf'),
                'estimated_remaining_time': float('inf'),
                'current_time': current_time,
                'exploration_rate': 0,
                'nodes_explored': nodes_explored,
                'calculation_method': 'Dados insuficientes para estimativa',
                'explanation': 'Dados insuficientes para estimativa'
            }
        
        # Taxa de explora√ß√£o (n√≥s por segundo)
        exploration_rate = nodes_explored / current_time
        
        # Estimativa do espa√ßo de busca restante
        # Heur√≠stica: considera que ainda precisamos explorar aproximadamente
        # uma fra√ß√£o do espa√ßo baseada no tamanho do grafo e bound atual
        remaining_space_factor = max(1, graph_size - current_bound)
        estimated_remaining_nodes = nodes_explored * remaining_space_factor
        
        # Estimativa de tempo restante
        estimated_remaining_time = estimated_remaining_nodes / exploration_rate
        
        # Tempo total estimado
        estimated_total_time = current_time + estimated_remaining_time
        
        return {
            'estimated_total_time': estimated_total_time,
            'estimated_remaining_time': estimated_remaining_time,
            'current_time': current_time,
            'exploration_rate': exploration_rate,
            'nodes_explored': nodes_explored,
            'calculation_method': 'Baseado na taxa de explora√ß√£o de n√≥s da √°rvore de busca',
            'explanation': f'Taxa atual: {exploration_rate:.2f} n√≥s/s. Espa√ßo restante estimado: {estimated_remaining_nodes:,} n√≥s'
        }
    
    @staticmethod
    def estimate_grasp_time(iteration: int,
                          current_time: float,
                          max_iterations: int,
                          best_clique_size: int,
                          improvement_history: list) -> Dict[str, Any]:
        """
        Estimar tempo necess√°rio para GRASP baseado na converg√™ncia.
        
        DADOS NECESS√ÅRIOS (j√° coletados pelo GRASP):
        - iteration: itera√ß√£o atual
        - current_time: tempo j√° decorrido
        - max_iterations: n√∫mero m√°ximo de itera√ß√µes configurado
        - best_clique_size: melhor clique encontrado
        - improvement_history: hist√≥rico de melhorias
        
        COMO PEGAR OS DADOS:
        1. iteration - contador de itera√ß√µes do loop principal
        2. current_time - calculado como: time.time() - start_time
        3. max_iterations - self.params.max_iterations
        4. best_clique_size - self.best_clique_size
        5. improvement_history - lista com tamanhos encontrados por itera√ß√£o
        
        C√ÅLCULO DA ESTIMATIVA:
        - Taxa de progresso = iteration / current_time
        - Itera√ß√µes restantes = max_iterations - iteration
        - Estimativa = itera√ß√µes_restantes / taxa_progresso
        
        Returns:
            Dict com estimativa e dados do c√°lculo
        """
        if iteration == 0 or current_time == 0:
            return {
                'estimated_total_time': float('inf'),
                'estimated_remaining_time': float('inf'),
                'current_time': current_time,
                'iteration_rate': 0,
                'remaining_iterations': max_iterations,
                'progress_percentage': 0,
                'calculation_method': 'Dados insuficientes para estimativa',
                'explanation': 'Dados insuficientes para estimativa'
            }
        
        # Taxa de progresso (itera√ß√µes por segundo)
        iteration_rate = iteration / current_time
        
        # Itera√ß√µes restantes
        remaining_iterations = max_iterations - iteration
        
        # Estimativa de tempo restante
        estimated_remaining_time = remaining_iterations / iteration_rate
        
        # Tempo total estimado
        estimated_total_time = current_time + estimated_remaining_time
        
        # An√°lise de converg√™ncia
        convergence_analysis = ""
        if len(improvement_history) > 10:
            recent_improvements = sum(1 for i in range(len(improvement_history)-10, len(improvement_history))
                                   if improvement_history[i] > improvement_history[i-1])
            convergence_analysis = f"Melhorias recentes: {recent_improvements}/10 itera√ß√µes"
        
        return {
            'estimated_total_time': estimated_total_time,
            'estimated_remaining_time': estimated_remaining_time,
            'current_time': current_time,
            'iteration_rate': iteration_rate,
            'remaining_iterations': remaining_iterations,
            'progress_percentage': (iteration / max_iterations) * 100,
            'calculation_method': 'Baseado na taxa de progresso das itera√ß√µes',
            'explanation': f'Taxa atual: {iteration_rate:.2f} iter/s. Restam {remaining_iterations:,} itera√ß√µes. {convergence_analysis}'
        }
    
    @staticmethod
    def format_time_estimate(estimate_data: Dict[str, Any]) -> str:
        """
        Formatar estimativa de tempo de forma leg√≠vel.
        
        Args:
            estimate_data: Dados da estimativa retornados pelos m√©todos acima
            
        Returns:
            String formatada com a estimativa
        """
        if estimate_data.get('estimated_total_time') == float('inf'):
            return "‚ö†Ô∏è N√£o foi poss√≠vel estimar o tempo (dados insuficientes)"
        
        total_time = estimate_data['estimated_total_time']
        remaining_time = estimate_data['estimated_remaining_time']
        
        # Converter para formato leg√≠vel
        def format_duration(seconds):
            if seconds < 60:
                return f"{seconds:.1f}s"
            elif seconds < 3600:
                minutes = seconds / 60
                return f"{minutes:.1f}min"
            elif seconds < 86400:
                hours = seconds / 3600
                return f"{hours:.1f}h"
            else:
                days = seconds / 86400
                return f"{days:.1f}d"
        
        result = f"üìä ESTIMATIVA DE TEMPO:\n"
        result += f"   ‚è±Ô∏è  Tempo restante estimado: {format_duration(remaining_time)}\n"
        result += f"   üéØ Tempo total estimado: {format_duration(total_time)}\n"
        result += f"   üìà M√©todo: {estimate_data['calculation_method']}\n"
        result += f"   üí° Detalhes: {estimate_data['explanation']}\n"
        
        return result


# Exemplo de uso simples para adicionar ao c√≥digo existente
def add_timeout_estimation_to_clisat():
    """
    EXEMPLO: Como adicionar estimativa de tempo ao CliSAT existente.
    
    Adicionar essas linhas quando detectar timeout no m√©todo solve():
    """
    exemplo_codigo = '''
    # No m√©todo solve() do CliSAT, quando detectar timeout:
    if self._time_exceeded():
        # Calcular estimativa
        current_time = time.time() - self.start_time
        estimate = TimeoutEstimator.estimate_clisat_time(
            stats=self.stats,
            current_time=current_time,
            graph_size=self.n,
            current_bound=self.lb
        )
        
        # Mostrar estimativa
        print(TimeoutEstimator.format_time_estimate(estimate))
        
        # Salvar dados para relat√≥rio
        self.timeout_estimate = estimate
        
        break
    '''
    return exemplo_codigo


def add_timeout_estimation_to_grasp():
    """
    EXEMPLO: Como adicionar estimativa de tempo ao GRASP existente.
    
    Adicionar essas linhas quando detectar timeout no m√©todo solve():
    """
    exemplo_codigo = '''
    # No m√©todo solve() do GRASP, quando detectar timeout:
    if time.time() - start_time >= self.params.time_limit:
        # Calcular estimativa
        current_time = time.time() - start_time
        estimate = TimeoutEstimator.estimate_grasp_time(
            iteration=iteration,
            current_time=current_time,
            max_iterations=self.params.max_iterations,
            best_clique_size=self.best_clique_size,
            improvement_history=self.stats.clique_sizes_history
        )
        
        # Mostrar estimativa
        print(TimeoutEstimator.format_time_estimate(estimate))
        
        # Salvar dados para relat√≥rio
        self.timeout_estimate = estimate
        
        break
    '''
    return exemplo_codigo
