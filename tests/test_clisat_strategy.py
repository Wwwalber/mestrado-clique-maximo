#!/usr/bin/env python3
"""
Script de Teste R√°pido da Estrat√©gia CliSAT

Este script executa um teste r√°pido da estrat√©gia em algumas inst√¢ncias pequenas
para verificar se tudo est√° funcionando corretamente antes da execu√ß√£o completa.

Autor: Walber
Data: Julho 2025
"""

import sys
import time
from pathlib import Path

# Adicionar src ao path
sys.path.append(str(Path(__file__).parent / "src"))

from execute_clisat_strategy import CliSATExecutionStrategy
import logging

# Configurar logging mais detalhado
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)


def test_quick_execution():
    """
    Teste r√°pido com inst√¢ncias pequenas.
    """
    print("üöÄ TESTE R√ÅPIDO DA ESTRAT√âGIA CLISAT")
    print("="*50)
    
    # Criar estrat√©gia de teste
    strategy = CliSATExecutionStrategy()
    
    # Definir inst√¢ncias de teste (pequenas e r√°pidas)
    test_instances = ['C125.9', 'brock200_2', 'keller4']
    test_time_limit = 1800  # 30 minutos por inst√¢ncia
    
    print(f"Testando {len(test_instances)} inst√¢ncias pequenas:")
    for inst in test_instances:
        print(f"  ‚Ä¢ {inst}")
    print(f"Tempo limite: {test_time_limit}s por inst√¢ncia")
    print()
    
    results = []
    total_start = time.time()
    
    for i, instance_name in enumerate(test_instances, 1):
        print(f"[{i}/{len(test_instances)}] Testando {instance_name}...")
        
        result = strategy.run_single_instance(instance_name, test_time_limit)
        results.append(result)
        
        if result['status'] == 'SUCCESS':
            print(f"  ‚úÖ Sucesso: clique {result['clique_size']} em {result['execution_time']:.2f}s")
        else:
            print(f"  ‚ùå Erro: {result.get('error', 'Erro desconhecido')}")
        print()
    
    total_time = time.time() - total_start
    
    # Resumo do teste
    successful = [r for r in results if r['status'] == 'SUCCESS']
    
    print("="*50)
    print("RESUMO DO TESTE:")
    print(f"  ‚Ä¢ Inst√¢ncias testadas: {len(results)}")
    print(f"  ‚Ä¢ Sucessos: {len(successful)}/{len(results)}")
    print(f"  ‚Ä¢ Tempo total: {total_time:.2f}s")
    
    if successful:
        avg_time = sum(r['execution_time'] for r in successful) / len(successful)
        avg_clique = sum(r['clique_size'] for r in successful) / len(successful)
        print(f"  ‚Ä¢ Tempo m√©dio: {avg_time:.2f}s")
        print(f"  ‚Ä¢ Clique m√©dio: {avg_clique:.1f}")
    
    print()
    
    if len(successful) == len(results):
        print("üéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("A estrat√©gia est√° funcionando corretamente.")
        print("Use o script principal para execu√ß√£o completa:")
        print("  python execute_clisat_strategy.py --all")
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
        print("Verifique os erros acima antes da execu√ß√£o completa.")
    
    return len(successful) == len(results)


def test_strategy_structure():
    """
    Testar a estrutura da estrat√©gia.
    """
    print("üîç TESTANDO ESTRUTURA DA ESTRAT√âGIA")
    print("="*40)
    
    strategy = CliSATExecutionStrategy()
    
    # Verificar grupos
    print("Grupos definidos:")
    for group_name, group_info in strategy.instance_groups.items():
        print(f"  ‚Ä¢ {group_name}: {len(group_info['instances'])} inst√¢ncias")
    
    print()
    
    # Verificar diret√≥rios
    print("Diret√≥rios:")
    print(f"  ‚Ä¢ Base: {strategy.base_dir}")
    print(f"  ‚Ä¢ Resultados: {strategy.results_dir}")
    print(f"  ‚Ä¢ Checkpoint: {strategy.checkpoint_file}")
    
    print()
    
    # Verificar total de inst√¢ncias
    total_instances = sum(len(group['instances']) for group in strategy.instance_groups.values())
    print(f"Total de inst√¢ncias: {total_instances}")
    
    # Verificar se h√° duplicatas
    all_instances = []
    for group in strategy.instance_groups.values():
        all_instances.extend(group['instances'])
    
    unique_instances = set(all_instances)
    if len(unique_instances) != len(all_instances):
        print(f"‚ö†Ô∏è  ATEN√á√ÉO: {len(all_instances) - len(unique_instances)} inst√¢ncias duplicadas encontradas")
    else:
        print("‚úÖ Nenhuma duplicata encontrada")
    
    print()
    return True


def main():
    """
    Fun√ß√£o principal do teste.
    """
    print("TESTE DA ESTRAT√âGIA DE EXECU√á√ÉO DO CLISAT")
    print("="*60)
    print()
    
    try:
        # Testar estrutura
        if not test_strategy_structure():
            print("‚ùå Erro na estrutura da estrat√©gia")
            return
        
        print()
        
        # Perguntar se deve executar teste pr√°tico
        response = input("Executar teste pr√°tico com inst√¢ncias pequenas? (s/n): ").lower()
        if response in ['s', 'sim', 'y', 'yes']:
            print()
            if test_quick_execution():
                print("\nüéØ PR√ìXIMOS PASSOS:")
                print("1. Para execu√ß√£o completa:")
                print("   python execute_clisat_strategy.py --all")
                print()
                print("2. Para execu√ß√£o por grupos:")
                print("   python execute_clisat_strategy.py --groups small_fast")
                print("   python execute_clisat_strategy.py --groups medium")
                print("   python execute_clisat_strategy.py --groups large")
                print("   python execute_clisat_strategy.py --groups critical")
                print()
                print("3. Para ver resumo da estrat√©gia:")
                print("   python execute_clisat_strategy.py --summary")
        else:
            print("\nTeste pr√°tico pulado. Use os comandos acima para execu√ß√£o.")
    
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
